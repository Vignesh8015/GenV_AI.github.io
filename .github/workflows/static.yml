<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gen V AI Chat</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        .typing-indicator {
            animation: pulse 1.5s infinite;
        }
        .model-badge {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            background-color: #e0e7ff;
            color: #4f46e5;
        }
        .message-user {
            border-radius: 1rem 1rem 0 1rem;
        }
        .message-bot {
            border-radius: 1rem 1rem 1rem 0;
            white-space: pre-wrap; /* Preserve formatting */
        }
        #image-preview {
            max-width: 200px;
            max-height: 200px;
            margin-top: 10px;
        }
        .feature-list {
            list-style-type: none;
            padding-left: 0;
        }
        .feature-list li {
            margin-bottom: 0.5rem;
            position: relative;
            padding-left: 1.5rem;
        }
        .feature-list li:before {
            content: "•";
            position: absolute;
            left: 0;
            color: #4f46e5;
            font-weight: bold;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col">
    <header class="bg-indigo-600 text-white shadow-lg">
        <div class="container mx-auto px-4 py-4 flex justify-between items-center">
            <div class="flex items-center space-x-3">
                <div class="bg-white rounded-full p-2">
                    <i class="fas fa-robot text-indigo-600 text-xl"></i>
                </div>
                <h1 class="text-xl font-bold">Gen V AI</h1>
            </div>
            <div class="flex items-center space-x-2">
                <span id="active-model" class="model-badge">No model selected</span>
                <button id="settings-btn" class="bg-white text-indigo-600 p-2 rounded-full hover:bg-indigo-50 transition">
                    <i class="fas fa-cog"></i>
                </button>
            </div>
        </div>
    </header>

    <!-- Settings Modal -->
    <div id="settings-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white rounded-xl p-6 w-full max-w-md">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold text-gray-800">API Settings</h3>
                <button id="close-modal" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="openrouter-key">
                    API Key
                </label>
                <input 
                    type="password" 
                    id="openrouter-key" 
                    placeholder="Enter your OpenRouter API key" 
                    class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent mb-2"
                >
                <p class="text-gray-500 text-sm">Get your key at <a href="https://openrouter.ai/keys" target="_blank" class="text-indigo-600 hover:underline">OpenRouter.ai</a></p>
            </div>

            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="site-url">
                    Your Site URL (optional)
                </label>
                <input 
                    type="text" 
                    id="site-url" 
                    placeholder="https://yourwebsite.com" 
                    class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent mb-2"
                >
            </div>

            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="site-name">
                    Your Site Name (optional)
                </label>
                <input 
                    type="text" 
                    id="site-name" 
                    placeholder="My AI Chat" 
                    class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent mb-2"
                >
            </div>

            <div class="mb-6">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="model-select">
                    Select AI Model
                </label>
                <select id="model-select" class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
                    <option value="google/gemini-2.5-flash-lite-preview-06-17">Gemini 2.5 Flash</option>
                    <option value="google/gemini-pro">Gemini Pro</option>
                    <option value="openai/gpt-4o">GPT-4o</option>
                    <option value="openai/gpt-3.5-turbo">GPT-3.5 Turbo</option>
                    <option value="anthropic/claude-3-opus">Claude 3 Opus</option>
                    <option value="anthropic/claude-3-sonnet">Claude 3 Sonnet</option>
                </select>
            </div>

            <div class="flex justify-end">
                <button id="save-settings" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition">
                    Save Settings
                </button>
            </div>
        </div>
    </div>

    <!-- Chat Container -->
    <main class="flex-1 container mx-auto px-4 py-6 flex flex-col max-w-3xl">
        <!-- Welcome Message -->
        <div class="bg-white rounded-xl shadow-md p-6 mb-6">
            <div class="flex items-start space-x-4">
                <div class="bg-indigo-100 p-3 rounded-full">
                    <i class="fas fa-info-circle text-indigo-600 text-xl"></i>
                </div>
                <div>
                    <h2 class="text-xl font-bold text-gray-800">Gen V AI Assistant</h2>
                    <p class="text-gray-600 mt-2">I'm an advanced AI assistant that can understand and generate human-like text responses. Here's what you should know:</p>

                    <div class="flex flex-wrap gap-2 mt-4">
                        <button onclick="sendSuggestion('How does this AI work?')" class="bg-indigo-100 text-indigo-700 px-4 py-2 rounded-full text-sm font-medium hover:bg-indigo-200 transition">
                            Ask how I work
                        </button>
                        <button onclick="sendSuggestion('Give me an example of what you can do')" class="bg-indigo-100 text-indigo-700 px-4 py-2 rounded-full text-sm font-medium hover:bg-indigo-200 transition">
                            Show example
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Chat Messages -->
        <div id="chat-container" class="flex-1 space-y-4 overflow-y-auto max-h-[60vh] pr-2">
            <!-- Messages will appear here -->
        </div>
        
        <!-- Input Area -->
        <div class="bg-white rounded-xl shadow-md p-4 mt-4 sticky bottom-4">
            <div class="flex flex-col space-y-3">
                <div class="flex items-center space-x-2">
                    <div class="flex-1 relative">
                        <input 
                            id="user-input" 
                            type="text" 
                            placeholder="Type your message..." 
                            class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                        >
                        <button id="send-button" class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-indigo-600 text-white p-2 rounded-lg hover:bg-indigo-700 transition">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
                
                <div class="flex items-center space-x-3">
                    <input 
                        type="file" 
                        id="image-upload" 
                        accept="image/*" 
                        class="hidden"
                    >
                    <button onclick="document.getElementById('image-upload').click()" class="bg-gray-200 text-gray-700 px-3 py-2 rounded-lg hover:bg-gray-300 transition">
                        <i class="fas fa-image mr-2"></i>Add Image
                    </button>
                    <span id="image-name" class="text-sm text-gray-500"></span>
                    <button id="remove-image" class="text-red-500 hover:text-red-700 hidden">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div id="image-preview-container" class="hidden">
                    <img id="image-preview" class="rounded-lg border border-gray-300">
                </div>
            </div>
        </div>
    </main>

    <footer class="bg-gray-800 text-white py-4 text-center text-sm">
        <p>© 2025 Gen V Products Powered by VIGNESH</p>
    </footer>

    <script>
        // DOM Elements
        const chatContainer = document.getElementById('chat-container');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const settingsBtn = document.getElementById('settings-btn');
        const settingsModal = document.getElementById('settings-modal');
        const closeModalBtn = document.getElementById('close-modal');
        const saveSettingsBtn = document.getElementById('save-settings');
        const modelSelect = document.getElementById('model-select');
        const openrouterKeyInput = document.getElementById('openrouter-key');
        const siteUrlInput = document.getElementById('site-url');
        const siteNameInput = document.getElementById('site-name');
        const activeModelDisplay = document.getElementById('active-model');
        const imageUpload = document.getElementById('image-upload');
        const imagePreviewContainer = document.getElementById('image-preview-container');
        const imagePreview = document.getElementById('image-preview');
        const imageNameDisplay = document.getElementById('image-name');
        const removeImageBtn = document.getElementById('remove-image');

        // State
        let currentModel = localStorage.getItem('openrouter-model') || 'google/gemini-2.5-flash-lite-preview-06-17';
        let apiKey = localStorage.getItem('openrouter-key') || '';
        let siteUrl = localStorage.getItem('site-url') || '';
        let siteName = localStorage.getItem('site-name') || '';
        let currentImage = null;
        let isWaiting = false;

        // Initialize
        function init() {
            modelSelect.value = currentModel;
            openrouterKeyInput.value = apiKey;
            siteUrlInput.value = siteUrl;
            siteNameInput.value = siteName;
            updateModelDisplay();
            
            if (chatContainer.children.length === 0) {
                addMessage("Hello! I'm your AI assistant. You can ask me anything or upload images for analysis.", 'bot');
            }

            // Event listeners
            userInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !isWaiting) {
                    sendMessage();
                }
            });
            
            sendButton.addEventListener('click', () => {
                if (!isWaiting) sendMessage();
            });
            
            settingsBtn.addEventListener('click', () => {
                settingsModal.classList.remove('hidden');
            });
            
            closeModalBtn.addEventListener('click', () => {
                settingsModal.classList.add('hidden');
            });
            
            saveSettingsBtn.addEventListener('click', saveSettings);
            
            imageUpload.addEventListener('change', handleImageUpload);
            removeImageBtn.addEventListener('click', clearImage);
        }

        // Save settings
        function saveSettings() {
            currentModel = modelSelect.value;
            apiKey = openrouterKeyInput.value.trim();
            siteUrl = siteUrlInput.value.trim();
            siteName = siteNameInput.value.trim();
            
            localStorage.setItem('openrouter-model', currentModel);
            localStorage.setItem('openrouter-key', apiKey);
            localStorage.setItem('site-url', siteUrl);
            localStorage.setItem('site-name', siteName);
            
            settingsModal.classList.add('hidden');
            updateModelDisplay();
            
            addMessage(`Settings updated. Using ${modelSelect.options[modelSelect.selectedIndex].text}`, 'bot');
        }

        // Update model display
        function updateModelDisplay() {
            const modelName = modelSelect.options[modelSelect.selectedIndex].text;
            activeModelDisplay.textContent = modelName;
        }

        // Handle image upload
        function handleImageUpload(event) {
            const file = event.target.files[0];
            if (file) {
                currentImage = file;
                imageNameDisplay.textContent = file.name;
                removeImageBtn.classList.remove('hidden');
                
                // Preview image
                const reader = new FileReader();
                reader.onload = function(e) {
                    imagePreview.src = e.target.result;
                    imagePreviewContainer.classList.remove('hidden');
                };
                reader.readAsDataURL(file);
            }
        }

        // Clear image
        function clearImage() {
            currentImage = null;
            imageUpload.value = '';
            imageNameDisplay.textContent = '';
            imagePreviewContainer.classList.add('hidden');
            removeImageBtn.classList.add('hidden');
        }

        // Add message to chat
        function addMessage(text, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `flex ${sender === 'user' ? 'justify-end' : 'justify-start'}`;
            
            const contentDiv = document.createElement('div');
            contentDiv.className = `max-w-xs md:max-w-md lg:max-w-lg xl:max-w-xl p-4 ${sender === 'user' 
                ? 'bg-indigo-600 text-white message-user' 
                : 'bg-white text-gray-800 shadow message-bot'}`;
            
            // Check if the text contains an image (base64)
            if (text.startsWith('data:image')) {
                const img = document.createElement('img');
                img.src = text;
                img.className = 'max-w-full h-auto rounded-lg';
                contentDiv.appendChild(img);
            } else {
                // Format response text with proper spacing and line breaks
                const formattedText = formatResponseText(text);
                contentDiv.innerHTML = formattedText;
            }
            
            messageDiv.appendChild(contentDiv);
            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        // Format response text for better readability
        function formatResponseText(text) {
            // Convert markdown-style lists to HTML
            text = text.replace(/\n\s*-\s*(.*?)(?=\n|$)/g, '\n<li>$1</li>');
            text = text.replace(/\n\s*\*\s*(.*?)(?=\n|$)/g, '\n<li>$1</li>');
            
            // Convert numbered lists
            text = text.replace(/\n\s*\d+\.\s*(.*?)(?=\n|$)/g, '\n<li>$1</li>');
            
            // Convert line breaks to <br> tags
            text = text.replace(/\n\n/g, '</p><p>');
            text = text.replace(/\n/g, '<br>');
            
            // Wrap in paragraphs if needed
            if (!text.startsWith('<p>') && !text.startsWith('<li>')) {
                text = `<p>${text}</p>`;
            }
            
            return text;
        }

        // Send suggestion
        function sendSuggestion(text) {
            userInput.value = text;
            sendMessage();
        }

        // Send message to API
        async function sendMessage() {
            const message = userInput.value.trim();
            if ((!message && !currentImage) || isWaiting) return;
            
            // Add user message
            if (message) {
                addMessage(message, 'user');
            }
            
            // Add image if exists
            if (currentImage) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    addMessage(e.target.result, 'user');
                };
                reader.readAsDataURL(currentImage);
            }
            
            userInput.value = '';
            isWaiting = true;
            
            // Show typing indicator
            const typingDiv = document.createElement('div');
            typingDiv.className = 'flex justify-start';
            const typingContent = document.createElement('div');
            typingContent.className = 'bg-white text-gray-800 shadow message-bot p-4 rounded-lg';
            typingContent.innerHTML = '<div class="flex space-x-2"><div class="w-2 h-2 rounded-full bg-gray-400 typing-indicator"></div><div class="w-2 h-2 rounded-full bg-gray-400 typing-indicator"></div><div class="w-2 h-2 rounded-full bg-gray-400 typing-indicator"></div></div>';
            typingDiv.appendChild(typingContent);
            chatContainer.appendChild(typingDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
            
            try {
                // Prepare the request body
                const body = {
                    model: currentModel,
                    messages: [
                        {
                            role: "user",
                            content: message || "Analyze this image"
                        }
                    ]
                };
                
                // Add image if exists
                if (currentImage) {
                    const reader = new FileReader();
                    const imageData = await new Promise((resolve) => {
                        reader.onload = () => resolve(reader.result.split(',')[1]);
                        reader.readAsDataURL(currentImage);
                    });
                    
                    body.messages[0].content = [
                        { type: "text", text: message || "What is in this image?" },
                        { type: "image", image: imageData }
                    ];
                }
                
                // Make API call
                const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${apiKey}`,
                        'Content-Type': 'application/json',
                        'HTTP-Referer': siteUrl,
                        'X-Title': siteName
                    },
                    body: JSON.stringify(body)
                });
                
                if (!response.ok) {
                    throw new Error(`API request failed with status ${response.status}`);
                }
                
                const data = await response.json();
                const reply = data.choices[0].message.content;
                
                // Remove typing indicator
                chatContainer.removeChild(typingDiv);
                
                // Add bot message
                addMessage(reply, 'bot');
            } catch (error) {
                console.error('Error:', error);
                chatContainer.removeChild(typingDiv);
                addMessage(`Sorry, I encountered an error: ${error.message}`, 'bot');
            } finally {
                isWaiting = false;
                clearImage();
            }
        }

        // Initialize the app
        init();
    </script>
</body>
</html>
